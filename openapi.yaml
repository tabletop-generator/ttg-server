openapi: "3.1.1"

info:
  title: Tabletop Generator API
  version: "1.0"
  description: REST API for managing AI-generated tabletop gaming assets
  license:
    name: Unlicensed
    identifier: Unlicensed

servers:
  - url: https://api.example.com
    description: Production server (TBD)

tags:
  - name: asset
    description: Assets operations
  - name: collection
    description: Collections operations
  - name: user
    description: Users operations
  - name: comment
    description: Comments operations

paths:
  /:
    get:
      operationId: healthcheck
      summary: Perform a health check on the API
      security: []
      responses:
        "200":
          description: OK

  /assets:
    post:
      tags:
        - asset
      operationId: createAsset
      summary: Create a new asset
      requestBody:
        $ref: "#/components/requestBodies/assetCreate"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "201":
          $ref: "#/components/responses/AssetDetails"
        "401":
          description: Unauthorized
    get:
      tags:
        - asset
      operationId: getAssets
      summary: Retrieve a list of assets
      security: []
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/assetTypeParam"
        - $ref: "#/components/parameters/collectionIdParam"
        - $ref: "#/components/parameters/userIdParam"
        - $ref: "#/components/parameters/nameParam"
        - $ref: "#/components/parameters/descriptionParam"
      responses:
        "200":
          $ref: "#/components/responses/AssetList"

  /assets/{assetId}:
    parameters:
      - $ref: "#/components/parameters/assetIdParam"
    get:
      tags:
        - asset
      operationId: getAssetById
      summary: Retrieve an asset by its ID
      security: []
      responses:
        "200":
          $ref: "#/components/responses/AssetDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    patch:
      tags:
        - asset
      operationId: patchAssetById
      summary: Update an asset by its ID
      requestBody:
        $ref: "#/components/requestBodies/assetUpdate"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "200":
          $ref: "#/components/responses/AssetDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    delete:
      tags:
        - asset
      operationId: deleteAssetById
      summary: Delete an asset by its ID
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /assets/{assetId}/like:
    parameters:
      - $ref: "#/components/parameters/assetIdParam"
    post:
      tags:
        - asset
      operationId: likeAssetById
      summary: Toggle like status for an asset
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "200":
          $ref: "#/components/responses/AssetLike"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /assets/{assetId}/comments:
    parameters:
      - $ref: "#/components/parameters/assetIdParam"
    post:
      tags:
        - comment
      operationId: createCommentByAssetId
      summary: Create a new comment on a specific asset
      requestBody:
        $ref: "#/components/requestBodies/commentCreateAndUpdate"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "201":
          $ref: "#/components/responses/CommentDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    get:
      tags:
        - comment
      operationId: getCommentsByAssetId
      summary: Retrieve all comments for a specific asset
      security: []
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          $ref: "#/components/responses/CommentList"
        "404":
          description: Not Found

  /assets/{assetId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/assetIdParam"
      - $ref: "#/components/parameters/commentIdParam"
    patch:
      tags:
        - comment
      operationId: patchCommentById
      summary: Update a specific comment by its ID
      requestBody:
        $ref: "#/components/requestBodies/commentCreateAndUpdate"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "200":
          $ref: "#/components/responses/CommentDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    delete:
      tags:
        - comment
      operationId: deleteCommentById
      summary: Delete a specific comment by its ID
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /collections:
    post:
      tags:
        - collection
      operationId: createCollection
      summary: Create a new collection
      requestBody:
        $ref: "#/components/requestBodies/collectionCreateAndUpdate"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "201":
          $ref: "#/components/responses/CollectionDetails"
        "401":
          description: Unauthorized
    get:
      tags:
        - collection
      operationId: getCollections
      summary: Retrieve a list of collections
      security: []
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          $ref: "#/components/responses/CollectionList"

  /collections/{collectionId}:
    parameters:
      - $ref: "#/components/parameters/collectionIdParam"
    get:
      tags:
        - collection
      operationId: getCollectionById
      summary: Retrieve a collection by its ID
      security: []
      responses:
        "200":
          $ref: "#/components/responses/CollectionDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    patch:
      tags:
        - collection
      operationId: patchCollectionById
      summary: Update a collection by its ID
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      requestBody:
        $ref: "#/components/requestBodies/collectionCreateAndUpdate"
      responses:
        "200":
          $ref: "#/components/responses/CollectionDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    delete:
      tags:
        - collection
      operationId: deleteCollectionById
      summary: Delete a collection by its ID
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /collections/{collectionId}/assets:
    parameters:
      - $ref: "#/components/parameters/collectionIdParam"
    post:
      tags:
        - collection
      operationId: addAssetsToCollection
      summary: Add a list of assets to a collection
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      requestBody:
        $ref: "#/components/requestBodies/assetIds"
      responses:
        "200":
          $ref: "#/components/responses/CollectionDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /collections/{collectionId}/assets/delete:
    parameters:
      - $ref: "#/components/parameters/collectionIdParam"
    post:
      tags:
        - collection
      operationId: removeAssetsFromCollection
      summary: Remove a list of assets from a collection
      requestBody:
        $ref: "#/components/requestBodies/assetIds"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "200":
          $ref: "#/components/responses/CollectionDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /users:
    post:
      tags:
        - user
      operationId: initializeUser
      summary: Find or create a record for the current user
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "201":
          $ref: "#/components/responses/UserDetails"
        "200":
          $ref: "#/components/responses/UserDetails"
        "401":
          description: Unauthorized

  /users/{userId}:
    parameters:
      - $ref: "#/components/parameters/userIdParam"
    get:
      tags:
        - user
      operationId: getUserById
      summary: Retrieve a user by their ID
      security: []
      responses:
        "200":
          $ref: "#/components/responses/UserDetails"
        "404":
          description: Not Found

  /users/me:
    get:
      tags:
        - user
      operationId: getCurrentUser
      summary: Retrieve the current user
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "200":
          $ref: "#/components/responses/UserDetails"
        "401":
          description: Unauthorized
    patch:
      tags:
        - user
      operationId: patchCurrentUser
      summary: Update the current user
      requestBody:
        $ref: "#/components/requestBodies/userUpdate"
      security:
        - basicHttpAuthentication: []
        - bearerHttpAuthentication: []
      responses:
        "200":
          $ref: "#/components/responses/UserDetails"
        "401":
          description: Unauthorized

components:
  requestBodies:
    assetCreate:
      content:
        application/json:
          schema:
            type: object
            required: ["name", "assetType", "visibility", "data"]
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 30
              assetType:
                $ref: "#/components/schemas/assetType"
              visibility:
                $ref: "#/components/schemas/visibility"
              data:
                $ref: "#/components/schemas/assetDataCreate"
          examples:
            character:
              $ref: "#/components/examples/characterAsset"
            location:
              $ref: "#/components/examples/locationAsset"
            quest:
              $ref: "#/components/examples/questAsset"
            map:
              $ref: "#/components/examples/mapAsset"
    commentCreateAndUpdate:
      content:
        application/json:
          schema:
            type: object
            required: ["body"]
            properties:
              body:
                type: string
                minLength: 1
                maxLength: 255
    collectionCreateAndUpdate:
      content:
        application/json:
          schema:
            type: object
            required: ["name"]
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 30
              description:
                type: string
                maxLength: 255
              visibility:
                $ref: "#/components/schemas/visibility"
    userUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              displayName:
                type: string
                minLength: 1
                maxLength: 30
              bio:
                type: string
                maxLength: 255
    assetUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 30
              description:
                type: string
                maxLength: 2000
              visibility:
                $ref: "#/components/schemas/visibility"
    assetIds:
      content:
        application/json:
          schema:
            type: object
            required: ["assetIds"]
            properties:
              assetIds:
                type: array
                items:
                  type: string
                  format: uuid
  responses:
    AssetDetails:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/asset"
              - type: object
                properties:
                  data:
                    $ref: "#/components/schemas/assetData"
    AssetLike:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: ["assetId", "likes", "likedByCurrentUser"]
            properties:
              assetId:
                type: string
                format: uuid
              likes:
                type: integer
                minimum: 0
              likedByCurrentUser:
                type: boolean
    AssetList:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: ["assets"]
            properties:
              assets:
                type: array
                items:
                  $ref: "#/components/schemas/asset"
    CommentDetails:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/comment"
    CommentList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/comment"
    CollectionDetails:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/collection"
              - type: object
                required: ["assets"]
                properties:
                  assets:
                    type: array
                    items:
                      $ref: "#/components/schemas/asset"
    CollectionList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/collection"
    UserDetails:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: ["userId", "createdAt", "displayName", "bio"]
            properties:
              userId:
                type: string
                format: uuid
              createdAt:
                type: string
                format: date-time
              displayName:
                type: string
                minLength: 1
                maxLength: 30
              bio:
                type: string
                maxLength: 255
  parameters:
    limitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
    offsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
    nameParam:
      name: name
      in: query
      schema:
        type: string
        minLength: 1
        maxLength: 30
    descriptionParam:
      name: description
      in: query
      schema:
        type: string
        minLength: 1
        maxLength: 255
    assetTypeParam:
      name: assetType
      in: query
      schema:
        $ref: "#/components/schemas/assetType"
    userIdParam:
      name: userId
      in: query
      schema:
        type: string
        format: uuid
    collectionIdParam:
      name: collectionId
      in: query
      schema:
        type: string
        format: uuid
    assetIdParam:
      name: assetId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    commentIdParam:
      name: commentId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    visibility:
      type: string
      enum: ["public", "private", "unlisted"]
    assetType:
      type: string
      enum: ["character", "location", "quest", "map"]
    comment:
      allOf:
        - $ref: "#/components/schemas/userSummary"
        - type: object
          required: ["commentId", "body", "createdAt", "updatedAt"]
          properties:
            commentId:
              type: string
              format: uuid
            body:
              type: string
              minLength: 1
              maxLength: 255
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    collection:
      allOf:
        - $ref: "#/components/schemas/userSummary"
        - type: object
          required:
            [
              "collectionId",
              "createdAt",
              "updatedAt",
              "visibility",
              "name",
              "description",
              "assetCount",
            ]
          properties:
            collectionId:
              type: string
              format: uuid
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            visibility:
              $ref: "#/components/schemas/visibility"
            name:
              type: string
              minLength: 1
              maxLength: 30
            description:
              type: string
              maxLength: 255
            assetCount:
              type: integer
              minimum: 0
    userSummary:
      type: object
      required: ["userId", "displayName"]
      properties:
        userId:
          type: string
          format: uuid
        displayName:
          type: string
          minLength: 1
          maxLength: 30
    asset:
      allOf:
        - $ref: "#/components/schemas/userSummary"
        - type: object
          required:
            [
              "assetId",
              "assetType",
              "name",
              "description",
              "visibility",
              "imageUrl",
              "likes",
              "likedByCurrentUser",
              "createdAt",
              "updatedAt",
            ]
          properties:
            assetId:
              type: string
              format: uuid
            assetType:
              $ref: "#/components/schemas/assetType"
            name:
              type: string
              minLength: 1
              maxLength: 30
            imageUrl:
              type: string
              format: uri
            likes:
              type: integer
              minimum: 0
            likedByCurrentUser:
              type: boolean
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            description:
              type: string
              maxLength: 2000
    assetData:
      discriminator:
        propertyName: assetType
        mapping:
          character: "#/components/schemas/character"
          location: "#/components/schemas/location"
          quest: "#/components/schemas/quest"
          map: "#/components/schemas/map"
      oneOf:
        - $ref: "#/components/schemas/character"
        - $ref: "#/components/schemas/location"
        - $ref: "#/components/schemas/quest"
        - $ref: "#/components/schemas/map"
    character:
      type: object
      required:
        [
          "race",
          "class",
          "gender",
          "alignment",
          "appearance",
          "personality",
          "background",
          "abilities",
          "equipment",
          "motivation",
          "notes",
        ]
      properties:
        race:
          type: string
          enum:
            [
              "human",
              "elf",
              "drow",
              "half_elf",
              "half_orc",
              "halfling",
              "dwarf",
              "gnome",
              "tiefling",
              "githyanki",
              "dragonborn",
            ]
        class:
          type: string
          enum:
            [
              "barbarian",
              "bard",
              "cleric",
              "druid",
              "fighter",
              "monk",
              "paladin",
              "ranger",
              "rogue",
              "sorcerer",
              "warlock",
              "wizard",
            ]
        gender:
          type: string
          enum: ["male", "female", "non_binary", "genderfluid", "agender"]
        alignment:
          type: string
          enum:
            [
              "lawful_good",
              "neutral_good",
              "chaotic_good",
              "lawful_neutral",
              "true_neutral",
              "chaotic_neutral",
              "lawful_evil",
              "neutral_evil",
              "chaotic_evil",
            ]
        appearance:
          type: string
          maxLength: 255
        personality:
          type: string
          maxLength: 255
        background:
          type: string
          maxLength: 255
        abilities:
          type: string
          maxLength: 255
        equipment:
          type: string
          maxLength: 255
        motivation:
          type: string
          maxLength: 255
        notes:
          type: string
          maxLength: 500
    location:
      type: object
      required:
        [
          "locationType",
          "terrain",
          "climate",
          "atmosphere",
          "inhabitants",
          "dangerLevel",
          "pointsOfInterest",
          "narrativeRole",
          "notes",
        ]
      properties:
        locationType:
          type: string
          maxLength: 255
        terrain:
          type: string
          maxLength: 255
        climate:
          type: string
          maxLength: 255
        atmosphere:
          type: string
          maxLength: 255
        inhabitants:
          type: string
          maxLength: 255
        dangerLevel:
          type: string
          maxLength: 255
        pointsOfInterest:
          type: string
          maxLength: 255
        narrativeRole:
          type: string
          maxLength: 255
        notes:
          type: string
          maxLength: 500
    quest:
      type: object
      required:
        [
          "questType",
          "tone",
          "location",
          "complexity",
          "objective",
          "antagonist",
          "notableNPCs",
          "hasCombat",
          "hasPuzzles",
          "hasSkillChallenges",
          "hasDilemmas",
          "notes",
        ]
      properties:
        questType:
          type: string
          maxLength: 255
        tone:
          type: string
          maxLength: 255
        location:
          type: string
          maxLength: 255
        complexity:
          type: string
          maxLength: 255
        objective:
          type: string
          maxLength: 255
        antagonist:
          type: string
          maxLength: 255
        notableNPCs:
          type: string
          maxLength: 255
        hasCombat:
          type: boolean
        hasPuzzles:
          type: boolean
        hasSkillChallenges:
          type: boolean
        hasDilemmas:
          type: boolean
        notes:
          type: string
          maxLength: 500
    map:
      type: object
      required: ["mapType", "terrain", "scale", "pointsOfInterest", "notes"]
      properties:
        mapType:
          type: string
          maxLength: 255
        terrain:
          type: string
          maxLength: 255
        scale:
          type: string
          maxLength: 255
        pointsOfInterest:
          type: string
          maxLength: 255
        notes:
          type: string
          maxLength: 500
    assetDataCreate:
      discriminator:
        propertyName: assetType
        mapping:
          character: "#/components/schemas/characterCreate"
          location: "#/components/schemas/locationCreate"
          quest: "#/components/schemas/questCreate"
          map: "#/components/schemas/mapCreate"
      oneOf:
        - $ref: "#/components/schemas/characterCreate"
        - $ref: "#/components/schemas/locationCreate"
        - $ref: "#/components/schemas/questCreate"
        - $ref: "#/components/schemas/mapCreate"
    characterCreate:
      type: object
      required: ["race", "class", "gender", "alignment"]
      properties:
        race:
          type: string
          enum:
            [
              "human",
              "elf",
              "drow",
              "half_elf",
              "half_orc",
              "halfling",
              "dwarf",
              "gnome",
              "tiefling",
              "githyanki",
              "dragonborn",
            ]
        class:
          type: string
          enum:
            [
              "barbarian",
              "bard",
              "cleric",
              "druid",
              "fighter",
              "monk",
              "paladin",
              "ranger",
              "rogue",
              "sorcerer",
              "warlock",
              "wizard",
            ]
        gender:
          type: string
          enum: ["male", "female", "non_binary", "genderfluid", "agender"]
        alignment:
          type: string
          enum:
            [
              "lawful_good",
              "neutral_good",
              "chaotic_good",
              "lawful_neutral",
              "true_neutral",
              "chaotic_neutral",
              "lawful_evil",
              "neutral_evil",
              "chaotic_evil",
            ]
        appearance:
          type: string
          maxLength: 255
        personality:
          type: string
          maxLength: 255
        background:
          type: string
          maxLength: 255
        abilities:
          type: string
          maxLength: 255
        equipment:
          type: string
          maxLength: 255
        motivation:
          type: string
          maxLength: 255
        notes:
          type: string
          maxLength: 500
    locationCreate:
      type: object
      required: ["locationType"]
      properties:
        locationType:
          type: string
          maxLength: 255
        terrain:
          type: string
          maxLength: 255
        climate:
          type: string
          maxLength: 255
        atmosphere:
          type: string
          maxLength: 255
        inhabitants:
          type: string
          maxLength: 255
        dangerLevel:
          type: string
          maxLength: 255
        pointsOfInterest:
          type: string
          maxLength: 255
        narrativeRole:
          type: string
          maxLength: 255
        notes:
          type: string
          maxLength: 500
    questCreate:
      type: object
      required:
        [
          "questType",
          "hasCombat",
          "hasPuzzles",
          "hasSkillChallenges",
          "hasDilemmas",
        ]
      properties:
        questType:
          type: string
          maxLength: 255
        tone:
          type: string
          maxLength: 255
        location:
          type: string
          maxLength: 255
        complexity:
          type: string
          maxLength: 255
        objective:
          type: string
          maxLength: 255
        antagonist:
          type: string
          maxLength: 255
        notableNPCs:
          type: string
          maxLength: 255
        hasCombat:
          type: boolean
        hasPuzzles:
          type: boolean
        hasSkillChallenges:
          type: boolean
        hasDilemmas:
          type: boolean
        notes:
          type: string
          maxLength: 500
    mapCreate:
      type: object
      required: ["mapType"]
      properties:
        mapType:
          type: string
          maxLength: 255
        terrain:
          type: string
          maxLength: 255
        scale:
          type: string
          maxLength: 255
        pointsOfInterest:
          type: string
          maxLength: 255
        notes:
          type: string
          maxLength: 500
  securitySchemes:
    basicHttpAuthentication:
      description: Basic HTTP Authentication
      type: http
      scheme: Basic
    bearerHttpAuthentication:
      description: Bearer token using a JWT
      type: http
      scheme: Bearer
      bearerFormat: JWT
  examples:
    characterAsset:
      summary: Character Asset
      value:
        assetType: character
        name: "Arannis the Wise"
        visibility: public
        data:
          race: elf
          class: wizard
          gender: male
          alignment: neutral_good
          appearance: "Tall, silver-haired with piercing green eyes"
          personality: "Calm and strategic thinker"
          background: "Noble lineage with arcane education"
          abilities: "Fireball, Teleport, Shield"
          equipment: "Spellbook, Staff, Robes"
          motivation: "Restore ancient elven knowledge"
          notes: "Allies with the druids of the west"
    locationAsset:
      summary: Location Asset
      value:
        assetType: location
        name: "Whispering Woods"
        visibility: public
        data:
          locationType: forest
          terrain: "Dense trees and uneven ground"
          climate: temperate
          atmosphere: "Eerie silence and flickering lights"
          inhabitants: "Fey creatures and elusive bandits"
          dangerLevel: high
          pointsOfInterest: "Ancient ruins, crystal spring"
          narrativeRole: "Hiding place for a relic"
          notes: "Travelers often go missing here"
    questAsset:
      summary: Quest Asset
      value:
        assetType: quest
        name: "Rescue the Blacksmith's Son"
        visibility: public
        data:
          questType: rescue
          tone: urgent
          location: "Caverns of Dread"
          complexity: medium
          objective: "Rescue the captive before nightfall"
          antagonist: "Goblin raiders"
          notableNPCs: "Blacksmith Garrek, Scout Lin"
          hasCombat: true
          hasPuzzles: false
          hasSkillChallenges: true
          hasDilemmas: false
          notes: "A time-sensitive challenge"
    mapAsset:
      summary: Map Asset
      value:
        assetType: map
        name: "Kingdom of Aldoria"
        visibility: public
        data:
          mapType: world
          terrain: "Mountains in the north, deserts in the south"
          scale: "1 inch = 100 miles"
          pointsOfInterest: "Capital city, cursed lake, rebel outpost"
          notes: "Borders subject to political conflict"
