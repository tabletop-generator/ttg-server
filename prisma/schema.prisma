generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @db.Uuid
  creatorId      Int             @map("creator_id")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  isFeatured     Boolean         @default(false) @map("is_featured")
  likes          Int             @default(0)
  type           enum_asset_type
  visibility     enum_visibility
  name           String
  description    String?
  imageUrl       String?         @map("image_url")
  imageUrlExpiry DateTime?       @map("image_url_expiry") @db.Timestamp(6)
  user           User            @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  character      Character?
  comments       Comment[]
  location       Location?
  map            Map?
  quest          Quest?
  collections    Collection[]    @relation("AssetToCollection")
}

model Character {
  assetId           Int                      @id @map("asset_id")
  race              enum_character_race
  class             enum_character_class
  gender            enum_character_gender
  alignment         enum_character_alignment
  abilities         String?
  appearance        String?
  background        String?
  equipment         String?
  motivation        String?
  personality       String?
  customDescription String?                  @map("custom_description")
  asset             Asset                    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Collection {
  id          Int             @id @default(autoincrement())
  creatorId   Int             @map("creator_id")
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  visibility  enum_visibility
  name        String
  description String?
  user        User            @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assets      Asset[]         @relation("AssetToCollection")
}

model Comment {
  id        Int      @id @default(autoincrement())
  assetId   Int      @map("asset_id")
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  body      String
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                      Int          @id @default(autoincrement())
  hashedEmail             String       @unique @map("hashed_email")
  joinDate                DateTime     @default(now()) @map("join_date") @db.Timestamp(6)
  displayName             String?      @map("display_name")
  profileBio              String?      @map("profile_bio")
  profilePictureUrl       String?      @map("profile_picture_url")
  profilePictureUrlExpiry DateTime?    @map("profile_picture_url_expiry") @db.Timestamp(6)
  assets                  Asset[]
  collections             Collection[]
  comments                Comment[]
}

model Location {
  assetId           Int     @id @map("asset_id")
  type              String
  terrain           String?
  climate           String?
  atmosphere        String?
  inhabitants       String?
  dangerLevel       String? @map("danger_level")
  pointsOfInterest  String? @map("points_of_interest")
  narrativeRole     String? @map("narrative_role")
  customDescription String? @map("custom_description")
  asset             Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Map {
  assetId           Int     @id @map("asset_id")
  type              String
  scale             String?
  terrain           String?
  pointsOfInterest  String? @map("points_of_interest")
  customDescription String? @map("custom_description")
  asset             Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Quest {
  assetId            Int     @id @map("asset_id")
  type               String
  tone               String?
  location           String?
  complexity         String?
  objective          String?
  antagonist         String?
  notableNpcs        String? @map("notable_npcs")
  hasCombat          Boolean @map("has_combat")
  hasPuzzles         Boolean @map("has_puzzles")
  hasSkillChallenges Boolean @map("has_skill_challenges")
  hasDilemmas        Boolean @map("has_dilemmas")
  customDescription  String? @map("custom_description")
  asset              Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum enum_asset_type {
  character
  quest
  map
  location
}

enum enum_character_alignment {
  lawful_good
  neutral_good
  chaotic_good
  lawful_neutral
  true_neutral
  chaotic_neutral
  lawful_evil
  neutral_evil
  chaotic_evil
}

enum enum_character_class {
  barbarian
  bard
  cleric
  druid
  fighter
  monk
  paladin
  ranger
  rogue
  sorcerer
  warlock
  wizard
}

enum enum_character_gender {
  male
  female
  non_binary
  genderfluid
  agender
}

enum enum_character_race {
  human
  elf
  drow
  half_elf
  half_orc
  halfling
  dwarf
  gnome
  tiefling
  githyanki
  dragonborn
}

enum enum_visibility {
  public
  private
  unlisted
}
