generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id             String          @id @db.Uuid
  creatorId      String          @map("creator_id") @db.Uuid
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  assetType      enum_asset_type @map("asset_type")
  visibility     enum_visibility
  name           String
  description    String
  imageUrl       String          @map("image_url")
  imageUrlExpiry DateTime        @map("image_url_expiry") @db.Timestamp(6)
  user           User            @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  AssetLike      AssetLike[]
  character      Character?
  comments       Comment[]
  location       Location?
  map            Map?
  quest          Quest?
  collections    Collection[]    @relation("AssetToCollection")
}

model Character {
  assetId     String                   @id @map("asset_id") @db.Uuid
  race        enum_character_race
  class       enum_character_class
  gender      enum_character_gender
  alignment   enum_character_alignment
  abilities   String                   @default("")
  appearance  String                   @default("")
  background  String                   @default("")
  equipment   String                   @default("")
  motivation  String                   @default("")
  personality String                   @default("")
  notes       String                   @default("")
  asset       Asset                    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Collection {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creatorId   String          @map("creator_id") @db.Uuid
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  visibility  enum_visibility
  name        String
  description String          @default("")
  user        User            @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assets      Asset[]         @relation("AssetToCollection")
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assetId   String   @map("asset_id") @db.Uuid
  authorId  String   @map("author_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  body      String
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assetId], map: "Comment_asset_id_index")
}

model User {
  id          String       @id @db.Uuid
  joinDate    DateTime     @default(now()) @map("join_date") @db.Timestamp(6)
  displayName String       @map("display_name")
  bio         String       @default("")
  assets      Asset[]
  AssetLike   AssetLike[]
  collections Collection[]
  comments    Comment[]
}

model Location {
  assetId          String @id @map("asset_id") @db.Uuid
  locationType     String @map("location_type")
  terrain          String @default("")
  climate          String @default("")
  atmosphere       String @default("")
  inhabitants      String @default("")
  dangerLevel      String @default("") @map("danger_level")
  pointsOfInterest String @default("") @map("points_of_interest")
  narrativeRole    String @default("") @map("narrative_role")
  notes            String @default("")
  asset            Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Map {
  assetId          String @id @map("asset_id") @db.Uuid
  mapType          String @map("map_type")
  scale            String @default("")
  terrain          String @default("")
  pointsOfInterest String @default("") @map("points_of_interest")
  notes            String @default("")
  asset            Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Quest {
  assetId            String  @id @map("asset_id") @db.Uuid
  questType          String  @map("quest_type")
  tone               String  @default("")
  location           String  @default("")
  complexity         String  @default("")
  objective          String  @default("")
  antagonist         String  @default("")
  notableNpcs        String  @default("") @map("notable_npcs")
  hasCombat          Boolean @map("has_combat")
  hasPuzzles         Boolean @map("has_puzzles")
  hasSkillChallenges Boolean @map("has_skill_challenges")
  hasDilemmas        Boolean @map("has_dilemmas")
  notes              String  @default("")
  asset              Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model AssetLike {
  assetId    String   @map("asset_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  Asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([assetId, userId])
  @@index([assetId], map: "AssetLike_asset_id_index")
  @@index([userId], map: "AssetLike_user_id_index")
}

enum enum_asset_type {
  character
  quest
  map
  location
}

enum enum_character_alignment {
  lawful_good
  neutral_good
  chaotic_good
  lawful_neutral
  true_neutral
  chaotic_neutral
  lawful_evil
  neutral_evil
  chaotic_evil
}

enum enum_character_class {
  barbarian
  bard
  cleric
  druid
  fighter
  monk
  paladin
  ranger
  rogue
  sorcerer
  warlock
  wizard
}

enum enum_character_gender {
  male
  female
  non_binary
  genderfluid
  agender
}

enum enum_character_race {
  human
  elf
  drow
  half_elf
  half_orc
  halfling
  dwarf
  gnome
  tiefling
  githyanki
  dragonborn
}

enum enum_visibility {
  public
  private
  unlisted
}
