# Continuous Delivery Workflow
#
# This should happen whenever we push a new tag, and we tag an existing
# commit after we know it's good (e.g., has been tested).
#
# To create a new tag, we also need to update the package.json version:
#
# $ npm version 0.5.0
#
# This will update `version` in package.json to `0.5.0` and create a new
# tag, `v0.5.0` in git. We'll then use this tag (i.e., `v0.5.0`) to tag
# our docker image before we push.
name: CD

on:
  push:
    # Whenever a new tag is pushed
    tags:
      # Any tag following semantic versioning should trigger this workflow.
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  # NOTE: this assumes our CI jobs have already passed previously
  # (i.e., that we don't tag a commit manually until we know a build is working)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      # Set up buildx for optimal Docker Builds, see:
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker image
      - name: Build and export
        env:
          # Define an Environment Variable with the current git commit's sha
          # Use the `github` context to get this, see:
          # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
          SHA_TAG: sha-${{ github.sha }}
          # Define one for our GCHR Repo
          GHCR_REPO: ghcr.io/${{ github.repository_owner }}/ttg-server
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.GHCR_REPO }}:latest,${{ env.GHCR_REPO }}:main,${{ env.GHCR_REPO }}:${{ env.SHA_TAG }},${{ env.GHCR_REPO }}:${{ env.VERSION_TAG }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: /tmp/image.tar

  ghcr:
    name: Push Docker image to GitHub Container Registry
    needs: [docker-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load image
        run: |
          docker load --input /tmp/image.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Registry
        env:
          GHCR_REPO: ghcr.io/${{ github.repository_owner }}/ttg-server
          SHA_TAG: sha-${{ github.sha }}
          VERSION_TAG: ${{ github.ref_name }}
        run: |
          docker push ${{ env.GHCR_REPO }}:latest
          docker push ${{ env.GHCR_REPO }}:main
          docker push ${{ env.GHCR_REPO }}:${{ env.SHA_TAG }}
          docker push ${{ env.GHCR_REPO }}:${{ env.VERSION_TAG }}

  cd:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        env:
          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$deploy_url"
